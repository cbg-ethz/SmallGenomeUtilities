#!/usr/bin/env python3

import argparse
import pysam
import os
import numpy as np
from multiprocessing import Pool

__author__ = "Susana Posada Cespedes"
__copyright__ = "Copyright 2017"
__credits__ = "Susana Posada Cespedes"
__license__ = "GPL2+"
__maintainer__ = "Susana Posada Cespedes"
__email__ = "hiv-cbg@bsse.ethz.ch"
__status__ = "Development"


def parse_args():
    """ Set up the parsing of command-line arguments """

    parser = argparse.ArgumentParser(description="Script to extract coverage windows for ShoRAH",
                                     formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.add_argument("-r", required=False, metavar='BED', dest='region',
                        help="Region of interested in BED format, e.g. HXB2:2253-3869. Loci are interpreted using 0-based indexing, and a half-open interval is used, i.e, [start:end)")
    parser.add_argument("-c", required=False, default=100, metavar='INT', dest='min_coverage',
                        type=int, help="Minimum read depth per window")
    parser.add_argument("-f", required=False, default=0.85, metavar='FLOAT',
                        dest='window_overlap', help="Threshold on the overlap between each read and the window")
    parser.add_argument("-w", required=False, default='201', metavar='len1,len2,...', dest='window_len',
                        help="Window length used by ShoRAH")
    parser.add_argument("-s", required=False, default='67', metavar='shift1, shift2, ...',
                        dest='window_shift', help="Window shifts used by ShoRAH")
    parser.add_argument("-N", required=False, default=None, metavar='name1,name2,...', dest="patientIDs",
                        help="Patient/sample identifiers as comma separated strings")
    parser.add_argument("-e", required=False, action='store_true', default=False, dest='right_offset',
                        help="Indicate whether to apply a more liberal shift on intervals' right-endpoint")
    parser.add_argument("-t", required=False, default=1, metavar='INT', dest='thrds', type=int,
                        help="Number of threads")
    parser.add_argument("-o", required=False, default="coverage_intervals.tsv", metavar='OUTPUT', dest='outfile',
                        help="Output file name")
    parser.add_argument("input_files", nargs='+',
                        metavar='BAM', help="Input BAM file(s)")

    return parser.parse_args()


def get_intervals_wrapper(args):

    bamfile, cov_thrd, win_thrd, start, end, window_len, window_shift, ref_id, right_offset = args

    if ref_id is not None:
        intervals = get_intervals(args)
    else:
        # Load bam file
        aln_reads = pysam.AlignmentFile(bamfile)
        intervals = []
        for ref in aln_reads.references:
            new_args = [bamfile, cov_thrd, win_thrd, start, end, window_len,
                        window_shift, ref, right_offset]
            intervals.append(get_intervals(new_args))
        # Remove empty strings
        intervals = filter(None, intervals)
        intervals = ','.join(intervals)

    return intervals


def get_intervals(args):

    bamfile, cov_thrd, win_thrd, start, end, window_len, window_shift, ref_id, right_offset = args

    def left_limit(bamfile, ref_len, cov_thrd, start, min_coverage_window, window_len, shift, ref_idx=0):
        cov_window = 0
        while cov_window < cov_thrd:
            if start > ref_len:
                return ref_len
            end = start + window_len
            # Count reads that cover at least 85% of the window
            # count: start, stop denote 0-based, right half-open interval, i.e. [start, stop)
            cov_window = bamfile.count(bamfile.references[ref_idx], start=start, stop=end,
                                       read_callback=lambda read: read.get_overlap(start, end) > min_coverage_window)
            start += shift
        return start - shift

    def right_limit(bamfile, ref_len, cov_thrd, start, min_coverage_window, window_len, shift, ref_idx=0):
        cov_window = cov_thrd
        while cov_window >= cov_thrd:
            if start > ref_len:
                return end
            end = start + window_len
            # Count reads that cover at least 85% of the window
            cov_window = bamfile.count(bamfile.references[ref_idx], start=start, stop=end,
                                       read_callback=lambda read: read.get_overlap(start, end) > min_coverage_window)
            #print("{}-{}:{}".format(start, end, cov_window))
            start += shift
        return end - shift

    # Threshold on the overlap btw each read and the window
    min_coverage_window = int(win_thrd * window_len)

    # Load bam file
    aln_reads = pysam.AlignmentFile(bamfile)

    if end is not None:
        ref_len = end - start + 1
    else:
        ref_len = aln_reads.get_reference_length(ref_id)
    ref_idx = aln_reads.get_tid(ref_id)
    assert aln_reads.is_valid_tid(
        ref_idx), "unknown reference {}".format(ref_id)

    left = []
    right = []
    while start < ref_len:
        start = left_limit(aln_reads, ref_len, cov_thrd, start, min_coverage_window,
                           window_len, window_len // (window_shift * 4), ref_idx)
        if start < ref_len:
            left.append(start)
            end = right_limit(aln_reads, ref_len, cov_thrd, start,
                              min_coverage_window, window_len, window_len // window_shift, ref_idx)
            right.append(end)
            start = end - window_len + (window_len // (window_shift * 4))

    # NOTE: ShoRAH (shotgun mode) adds or subtracts 3 * (window-length /
    #       window-shift), to ensure that every locus in the target region
    #       is covered by 3 windows. This is the default bevaviour, as
    #       window-shift is, by defualt, set to 3. Meaning that overlapping
    #       windows are shifted by window-length // 3. Below, we account for
    #       such offset.
    left = np.array(left)
    right = np.array(right)

    # Add offset to starting position.
    left += window_len

    # Subtract offset to ending position.
    if right_offset:
        # Often the last position with high coverage is not covered by any
        # of the windows
        right -= int(window_len * 2 // 3)
    else:
        right -= window_len

    # Check if intervals are at least as long as the window length + shift
    interval_lengths = right - left
    mask = interval_lengths < 0
    left = left[~mask]
    right = right[~mask]

    intervals = ','.join("{}:{}-{}".format(ref_id, x, y)
                         for x, y in zip(left, right))

    return intervals


def main():
    args = parse_args()

    num_samples = len(args.input_files)
    window_len = args.window_len.split(",")
    assert len(
        window_len) == num_samples, 'Number of input values do not match number of input files.'

    window_shift = args.window_shift.split(",")
    assert len(
        window_shift) == num_samples, 'Number of input values do not match number of input files.'

    if args.patientIDs is None:
        patientIDs = np.arange(num_samples)
    else:
        patientIDs = args.patientIDs.split(",")

    assert len(
        patientIDs) == num_samples, 'Number of patient/sample identifiers do not match number of input files.'

    # Get name of the reference
    reference_name = None
    if args.region is not None:
        aux = args.region.split(":")
        reference_name = aux[0]
        aux = aux[1].split('-')
        start = int(aux[0])
        end = int(aux[1])
    else:
        start = 0
        end = None

    args_list = [(args.input_files[idx], args.min_coverage, args.window_overlap, start, end, int(
        window_len[idx]), int(window_shift[idx]), reference_name, args.right_offset) for idx in range(num_samples)]

    pool = Pool(processes=args.thrds)
    res = pool.map(get_intervals_wrapper, args_list)
    pool.close()
    pool.join()

    with open(args.outfile, "wt") as outfile:
        for idx in range(num_samples):
            outfile.write("{}\t{}\n".format(patientIDs[idx], res[idx]))


if __name__ == '__main__':
    main()
